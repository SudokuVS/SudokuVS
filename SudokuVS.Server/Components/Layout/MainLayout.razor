@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<div class="h-100 d-flex flex-column">
    <header class="text-bg-dark d-flex align-items-center gap-2 px-2" style="height:64px;">
        <div class="h-100 d-flex align-items-center justify-content-center px-4 position-relative">
            <div class="d-flex gap-2 align-items-baseline justify-content-center">
                <div class="d-flex flex-column">
                    <span class="fs-4 fw-semibold">Sudoku VS</span>
                </div>

                @if (_version != null)
                {
                    <span class="small">@_version</span>
                }

                @if (!string.IsNullOrWhiteSpace(_prereleaseIdentifier))
                {
                    <span class="badge text-bg-light">@_prereleaseIdentifier</span>
                }

                @if (_isDebugVersion)
                {
                    <span class="badge text-bg-warning">DEBUG</span>
                }
            </div>
            <a class="stretched-link" href="/"></a>
        </div>

        <div class="flex-grow-1"></div>

        <div class="h-100 d-flex align-items-center gap-1 px-4 position-relative">
            @if (AuthenticatedUser?.Identity?.IsAuthenticated ?? false)
            {
                <span class="fs-5 fw-semibold">
                    @(AuthenticatedUser.Identity.Name)
                </span>
                <a class="small text-white" href="MicrosoftIdentity/Account/SignOut">(logout)</a>
            }
        </div>
    </header>

    <hr class="p-0 m-0"/>

    <main class="flex-grow-1">
        <CascadingValue Value="AuthenticatedUser">
            @Body
        </CascadingValue>
    </main>
</div>

@inject AuthenticationStateProvider Provider 

@code {

    string? _version;
    bool _isDebugVersion;
    string? _prereleaseIdentifier;

    public ClaimsPrincipal? AuthenticatedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _version = Metadata.Version != null ? $"v{Metadata.Version.Major}.{Metadata.Version.Minor}.{Metadata.Version.Patch}" : null;
        _isDebugVersion = Metadata.Version?.IsDebug() ?? false;
        _prereleaseIdentifier = Metadata.Version?.PrereleaseIdentifier().ToUpper() ?? "";

        AuthenticationState state = await Provider.GetAuthenticationStateAsync();
        AuthenticatedUser = state.User.Identity?.IsAuthenticated == true ? state.User : null;
    }

}