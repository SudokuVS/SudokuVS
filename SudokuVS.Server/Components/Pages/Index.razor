@page "/"
@using System.Collections.Specialized
@using System.Net
@using System.Security.Claims
@using System.Web
@using SudokuVS.Game
@using SudokuVS.Game.Persistence
@using SudokuVS.Game.Users
@using SudokuVS.Server.Services
@inject NavigationManager Navigation;
@inject IJSRuntime JsRuntime; 
@inject ISudokuGamesRepository Repository;
@inject GameTokenService GameTokenService;
@inject ILogger<Index> Logger;
@attribute [AllowAnonymous]

<PageTitle>@Constants.ProductName</PageTitle>

@if (AuthenticatedUser == null)
{
    <div class="w-100 h-100 d-flex align-items-center justify-content-center">
        <button class="btn btn-primary btn-lg" @onclick="Login">Login</button>
    </div>
}
else
{
    <div class="h-100 container d-flex flex-column align-items-stretch justify-content-center p-4">
        <div class="border rounded p-4">
            <h2>New Game</h2>
            <EditForm class="w-100 d-flex flex-column align-items-start justify-content-center py-4" Model="_model" OnSubmit="NewGame">
                <div class="row gap-2 mb-3">
                    <label for="name" class="col-2 col-form-label">Name</label>
                    <div class="col">
                        <InputText id="name" class="form-control" @bind-Value="_model!.Name" placeholder="(auto)"></InputText>
                    </div>
                </div>
                <div class="row gap-2 mb-3">
                    <label for="hints" class="col-2 col-form-label">Hints</label>
                    <div class="col">
                        <InputNumber id="hints" class="form-control" @bind-Value="_model!.Hints"></InputNumber>
                    </div>
                </div>
                <button class="btn btn-primary">Create</button>
            </EditForm>

            @if (_newGameError != null)
            {
                <div class="text-danger small">
                    @_newGameError
                </div>
            }
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public ClaimsPrincipal? AuthenticatedUser { get; set; }

    Model? _model;
    string? _newGameError;

    protected override void OnInitialized() => _model ??= new Model();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Login with redirection flow:
        // - The unauthenticated user navigates to /some/path
        // - The MainLayout redirects the user to /?post-login-redirect=/some/path
        // - The Index saves the post-login-redirect to the local storage of the user
        // - The Index navigates to / (no query params) because it is the redirect URI of the OAuth2 provider
        // - The Index waits for the user to press Login
        // - The Index navigates to the /MicrosoftIdentity/Account/SignIn page (Microsoft Identity Web UI)
        // - The SignIn page redirects to Microsoft Identity
        // - Microsoft Identity performs authentication and returns to the Index
        // - The Index finds an authenticated user and a post-login-redirect item in the local storage and redirects to that URI 

        if (AuthenticatedUser != null)
        {
            string postLoginRedirect = await JsRuntime.InvokeAsync<string>("localStorageGetItem", "post-login-redirect");
            if (!string.IsNullOrWhiteSpace(postLoginRedirect))
            {
                await JsRuntime.InvokeVoidAsync("localStorageRemoveItem", "post-login-redirect");

                if (postLoginRedirect.StartsWith("/"))
                {
                    Navigation.NavigateTo(postLoginRedirect, false, true);
                }
                else
                {
                    Logger.LogWarning("Redirection failed, expected url to start with '/': {url}", postLoginRedirect);
                }

            }
        }
    }

    async Task Login()
    {
        Uri uri = new(Navigation.Uri);
        NameValueCollection queryParams = HttpUtility.ParseQueryString(uri.Query);
        string? postLoginRedirectInQueryParams = queryParams.Get("post-login-redirect"); // set by the MainLayout when redirecting to index
        if (!string.IsNullOrWhiteSpace(postLoginRedirectInQueryParams))
        {
            string uriDecoded = WebUtility.UrlDecode(postLoginRedirectInQueryParams);
            await JsRuntime.InvokeVoidAsync("localStorageSetItem", "post-login-redirect", uriDecoded);
        }

        Navigation.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

    void NewGame()
    {
        _newGameError = null;

        UserIdentity? userIdentity = AuthenticatedUser?.GetUserIdentity();
        if (userIdentity == null)
        {
            _newGameError = "Could not find player name";
            StateHasChanged();
            return;
        }

        string? name = string.IsNullOrWhiteSpace(_model?.Name) ? null : _model.Name;
        SudokuGameOptions options = new()
        {
            MaxHints = _model is not { Hints: > 0 } ? 0 : _model.Hints
        };

        SudokuGame? game = SudokuGame.Create(name, options);
        if (game == null)
        {
            _newGameError = "Could not generate grid";
            StateHasChanged();
            return;
        }

        Repository.Save(game);

        game.Join(userIdentity, PlayerSide.Player1);
        string token = GameTokenService.Generate(game.Id, PlayerSide.Player1);
        Navigation.NavigateTo($"/game/{token}");
    }

    class Model
    {
        public string? Name { get; set; }
        public int Hints { get; set; } = 3;
    }

}