@using Microsoft.AspNetCore.Identity
@using SudokuVS.Game
@using SudokuVS.Game.Models
@using SudokuVS.Server.Models
@using SudokuVS.Server.Services
@inject IJSRuntime JsRuntime
@inject GamesService GamesService
@inject UserManager<AppUser> UserManager

<div class="w-100 overflow-hidden d-flex gap-4">
    @if (_game != null)
    {
        <div class="d-flex align-items-center justify-content-center">
            <GridIconComponent Grid="_game.InitialGrid" HideState="!_game.IsStarted"></GridIconComponent>
        </div>
        <div class="overflow-hidden flex-grow-1">
            <div class="w-100">
                @{
                    string player1WinLoseStyle = _game.Winner switch { PlayerSide.Player1 => "text-success", PlayerSide.Player2 => "text-danger", _ => "" };
                    string player2WinLoseStyle = _game.Winner switch { PlayerSide.Player1 => "text-danger", PlayerSide.Player2 => "text-success", _ => "" };
                }
                <div class="w-100 text-truncate">
                    <span class="fs-5 fw-semibold @player1WinLoseStyle" style="padding-left:20px;">
                        @(_player1Name ?? "???")
                    </span>
                </div>
                <div class="w-100 text-truncate">
                    <span style="width:16px;">vs.</span>
                    <span class="fs-5 fw-semibold @player2WinLoseStyle">
                        @(_player2Name ?? "???")
                    </span>
                </div>
            </div>

            <div class="lead">
                @if (_game.IsStarted)
                {
                    @:Round 1
                }
                else if (!_game.IsOver)
                {
                    @:<i class="bi bi-hourglass-split ps-2"></i> In preparation
                }
            </div>
        </div>

        @if (_game.IsStarted)
        {
            <div class="d-flex align-items-center justify-content-center">
                <span class="timer-@_game.Id font-monospace fs-4">
                    @GetElapsedTime()
                </span>
            </div>
        }
    }
</div>

@code {

    IJSObjectReference? _gameSummaryModule;

    [Parameter]
    public Guid GameId { get; set; }

    SudokuGame? _game;
    string? _player1Name;
    string? _player2Name;

    public async Task OnStateHasChangedAsync() => await UpdateGame();

    protected override async Task OnInitializedAsync() => await UpdateGame();
    protected override async Task OnParametersSetAsync() => await UpdateGame();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _gameSummaryModule ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Areas/App/Components/GameSummaryComponent.razor.js");
        }
    }

    string GetElapsedTime()
    {
        if (_game == null)
        {
            return "";
        }

        TimeSpan time;
        if (_game.IsOver)
        {
            time = _game.EndDate.Value - _game.StartDate.Value;
        }
        else if (_game.IsStarted)
        {
            time = DateTime.Now - _game.StartDate.Value;
        }
        else
        {
            time = TimeSpan.Zero;
        }

        if (time.TotalHours >= 1)
        {
            return $"{time.TotalHours:0.}:{time.Minutes:00}:{time.Seconds:00}";
        }

        return $"{time.TotalMinutes:00}:{time.Seconds:00}";
    }

    async Task UpdateGame()
    {
        _game = await GamesService.GetGameAsync(GameId);

        if (_game != null)
        {
            string? player1Username = _game.Player1?.Username;
            if (!string.IsNullOrEmpty(player1Username))
            {
                AppUser? user = await UserManager.GetUserByIdAsync(player1Username);
                _player1Name = user?.GetPublicName() ?? player1Username;
            }

            string? player2Username = _game.Player2?.Username;
            if (!string.IsNullOrEmpty(player2Username))
            {
                AppUser? user = await UserManager.GetUserByIdAsync(player2Username);
                _player2Name = user?.GetPublicName() ?? player2Username;
            }
        }

        if (_gameSummaryModule != null)
        {
            if (_game is { StartDate: not null })
            {
                await _gameSummaryModule.InvokeVoidAsync("startTimer", $"timer-{_game.Id}", _game.StartDate);
            }
            else if (_game is not null)
            {
                await _gameSummaryModule.InvokeVoidAsync("stopTimer", $"timer-{_game.Id}");
            }
        }

        StateHasChanged();
    }

}