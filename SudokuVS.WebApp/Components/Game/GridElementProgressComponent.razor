@using SudokuVS.Sudoku.Models.Abstractions
<div class="row">
    <div class="col-3 text-end">
        @GetTitle()
    </div>
    <div class="col">
        <div class="w-100 h-100 progress" role="progressbar" aria-valuemin="0" aria-valuenow="@GetValue()" aria-valuemax="@GetMaxValue()">
            <div class="progress-bar bg-info" style="width: @GetValuePercent()">
                @GetValue() / @GetMaxValue()
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public IReadOnlySudokuGrid? Grid { get; set; }

    [Parameter]
    public int Element { get; set; }

    string GetTitle() => Element.ToString();

    string GetValuePercent()
    {
        int max = GetMaxValue();
        if (max == 0)
        {
            return "0%";
        }

        int count = GetValue();
        int percent = count * 100 / max;
        return $"{percent}%";
    }

    int GetValue() => Grid == null ? 0 : Grid.Enumerate().Count(x => !x.Cell.IsLocked && x.Cell.Element == Element);
    int GetTotalValue() => Grid == null ? 0 : Grid.Enumerate().Count(x => x.Cell is { IsLocked: false, IsEmpty: false });
    int GetMaxValue() => Grid == null ? 0 : 9 - Grid.Enumerate().Count(x => x.Cell.IsLocked && x.Cell.Element == Element);

}