@page "/game/{GameId?}"
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject ISudokuGamesRepository Repository
@using System.Security.Claims
@using SudokuVS.Game
@using SudokuVS.Game.Models
@using SudokuVS.Game.Persistence
@using SudokuVS.Game.Users
@using SudokuVS.WebApp.Components.Game
@implements IDisposable

@if (_instance == null)
{
    <PageTitle>@Constants.ProductName - Game</PageTitle>
}
else
{
    <PageTitle>@Constants.ProductName - @_instance.Name</PageTitle>
}

@if (_instance != null)
{
    <div class="w-100 h-100 d-flex flex-column">
        <div class="d-flex align-items-center justify-content-center">
            <div class="game-result d-flex flex-column align-items-center justify-content-center border-bottom border-secondary-subtle text-center px-4 py-2">
                <div class="fs-2">@_instance.Name</div>

                <div class="fs-4">
                    @if (_instance.IsOver)
                    {
                        @if (_playerState == null)
                        {
                            <span class="fw-bold">
                                @(_instance.Winner == PlayerSide.Player1 ? _instance.Player1!.User.Name : _instance.Player2!.User.Name)
                                WIN!
                            </span>
                        }
                        else
                        {
                            @if (_instance.Winner == _playerState.Side)
                            {
                                <span class="fw-bold text-success">You WIN!</span>
                            }
                            else
                            {
                                <span class="fw-bold text-danger">You LOSE!</span>
                            }
                        }
                    }
                    else if (_instance.IsStarted)
                    {
                        <span>Round 1</span>
                    }
                    else
                    {
                        <span>In preparation</span>
                    }
                </div>

                @if (_instance.IsStarted)
                {
                    <div class="fs-4 fw-semibold">@GetElapsedTime()</div>
                }
            </div>
        </div>
        <div class="w-100 flex-grow-1 d-flex align-items-stretch">
            <div class="w-50 border-end border-secondary-subtle pt-4">
                @if (_player1HiddenState == null)
                {
                    @if (_playerState == null)
                    {
                        // Player is not the game, they can join as player 1
                        <div class="w-100 h-100 d-flex align-items-center justify-content-center">
                            <button class="btn btn-outline-primary" @onclick="JoinAsPlayer1">Join</button>
                        </div>
                    }
                    else
                    {
                        // Player is in the game, this side is empty and waiting for an opponent
                        <div class="w-100 h-100 d-flex flex-column gap-2 align-items-center justify-content-center">
                            <h3>No opponent has joined yet!</h3>
                            <div class="w-50 position-relative d-flex flex-column gap-2 border border-secondary-subtle rounded p-2 px-4 wrap-anywhere">
                                <div id="invitation-link-container" class="font-monospace text-secondary">
                                    @GetOtherPlayerInvitationLink()
                                </div>
                                <a class="btn btn-outline-primary my-2 stretched-link" @onclick="CopyInvitationLinkAsync" id="copy-invitation-link-button">Copy invitation link</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    @if (_playerState is { Side: PlayerSide.Player1 })
                    {
                        @if (_instance.IsStarted)
                        {
                            <CurrentPlayerComponent State="_playerState" RightToLeft></CurrentPlayerComponent>
                        }
                        else
                        {
                            <OtherPlayerComponent State="_player1HiddenState" RightToLeft></OtherPlayerComponent>
                        }
                    }
                    else
                    {
                        <OtherPlayerComponent State="_player1HiddenState" RightToLeft></OtherPlayerComponent>
                    }
                }
            </div>
            <div class="w-50 pt-4">
                @if (_player2HiddenState == null)
                {
                    @if (_playerState == null)
                    {
                        // Player is not the game, they can join as player 2
                        <div class="w-100 h-100 d-flex align-items-center justify-content-center">
                            <button class="btn btn-outline-primary" @onclick="JoinAsPlayer2">Join</button>
                        </div>
                    }
                    else
                    {
                        // Player is in the game, this side is empty and waiting for an opponent
                        <div class="w-100 h-100 d-flex flex-column gap-2 align-items-center justify-content-center">
                            <h3>No opponent has joined yet!</h3>
                            <div class="w-50 position-relative d-flex flex-column gap-2 border border-secondary-subtle rounded p-2 px-4 wrap-anywhere">
                                <div id="invitation-link-container" class="font-monospace text-secondary">
                                    @GetOtherPlayerInvitationLink()
                                </div>
                                <a class="btn btn-outline-primary my-2 stretched-link" @onclick="CopyInvitationLinkAsync" id="copy-invitation-link-button">Copy invitation link</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    @if (_playerState is { Side: PlayerSide.Player2 })
                    {
                        @if (_instance.IsStarted)
                        {
                            <CurrentPlayerComponent State="_playerState"></CurrentPlayerComponent>
                        }
                        else
                        {
                            <OtherPlayerComponent State="_player2HiddenState"></OtherPlayerComponent>
                        }
                    }
                    else
                    {
                        <OtherPlayerComponent State="_player2HiddenState"></OtherPlayerComponent>
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="w-100 h-100 d-flex flex-column align-items-center justify-content-center">
        <div class="text-danger">Game not found</div>
        <a href="/">Go back</a>
    </div>
}

@code {

    [Parameter]
    public string? GameId { get; set; }

    [CascadingParameter]
    public ClaimsPrincipal? AuthenticatedUser { get; set; }

    UserIdentity? _user;
    SudokuGame? _instance;
    PlayerState? _playerState;
    IHiddenPlayerState? _player1HiddenState;
    IHiddenPlayerState? _player2HiddenState;
    Timer? _timer;

    IJSObjectReference? _gameModule;

    protected override async Task OnInitializedAsync()
    {
        if (GameId == null || !Guid.TryParse(GameId, out Guid gameId))
        {
            return;
        }

        _user = AuthenticatedUser?.GetUserIdentity();
        if (_user == null)
        {
            return;
        }

        _instance = await Repository.GetAsync(gameId);
        if (_instance == null)
        {
            return;
        }

        _instance.PlayerJoined += OnPlayerJoined;
        _instance.GameOver += OnGameOver;

        UpdatePlayers();

        _timer = new Timer(__ => _ = InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    void UpdatePlayers()
    {
        if (_instance == null)
        {
            _player1HiddenState = null;
            _player2HiddenState = null;
            _playerState = null;
            return;
        }

        _player1HiddenState = _instance.GetHiddenPlayerState(PlayerSide.Player1);
        _player2HiddenState = _instance.GetHiddenPlayerState(PlayerSide.Player2);

        if (_user == null)
        {
            _playerState = null;
            return;
        }

        _playerState = _instance.GetPlayerState(_user.Id);
        if (_playerState == null)
        {
        }
    }

    void JoinAsPlayer1()
    {
        if (_instance == null || _user == null)
        {
            return;
        }

        _instance.Join(_user, PlayerSide.Player1);
    }

    void JoinAsPlayer2()
    {
        if (_instance == null || _user == null)
        {
            return;
        }

        _instance.Join(_user, PlayerSide.Player2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _gameModule ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Game.razor.js");
    }

    string GetElapsedTime()
    {
        if (_instance == null)
        {
            return "";
        }

        TimeSpan time;
        if (_instance.IsOver)
        {
            time = _instance.EndDate.Value - _instance.StartDate.Value;
        }
        else if (_instance.IsStarted)
        {
            time = DateTime.Now - _instance.StartDate.Value;
        }
        else
        {
            time = TimeSpan.Zero;
        }

        if (time.TotalHours >= 1)
        {
            return $"{time.TotalHours:0.}:{time.Minutes:00}:{time.Seconds:00}";
        }

        return $"{time.TotalMinutes:00}:{time.Seconds:00}";
    }

    public void Dispose()
    {
        if (_instance is not null)
        {
            _instance.PlayerJoined -= OnPlayerJoined;
        }

        _timer?.Dispose();
    }

    void OnPlayerJoined(object? __, PlayerSide side) =>
        _ = InvokeAsync(
            () =>
            {
                UpdatePlayers();
                StateHasChanged();
            }
        );

    void OnGameOver(object? __, PlayerSide ___) => _ = InvokeAsync(StateHasChanged);

    string GetOtherPlayerInvitationLink() => _instance == null ? "" : $"{Navigation.BaseUri}game/{_instance.Id}";

    async Task CopyInvitationLinkAsync()
    {
        if (_gameModule == null)
        {
            return;
        }

        await _gameModule.InvokeVoidAsync("copyInvitationLink", GetOtherPlayerInvitationLink());
    }

}