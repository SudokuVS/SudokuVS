@using SudokuBattle.App.Models.Game
@using SudokuBattle.Sudoku.Models
<div class="d-flex flex-column align-items-center justify-content-center gap-3">
    <div class="fs-4 fw-semibold">
        @State.PlayerName
    </div>
    <div class="d-flex align-items-center justify-content-center">
        <GridComponent Grid="_displayGrid" GridSize="GridComponent.Size.Big" Disabled="true"></GridComponent>
    </div>
    <div class="fs-4 fw-semibold">
        @State.PlayerName
    </div>
    <div class="controls">
        <!-- WIP -->
    </div>
</div>

@code {

    GridComponent.Cell[,]? _displayGrid;

    [Parameter]
    public required OtherPlayerState State { get; set; }

    HiddenSudokuGrid Grid => State.Grid;

    protected override void OnInitialized()
    {
        UpdateGrid();
        Grid.CellValueChanged += OnCellValueChanged;
        Grid.CellAnnotationChanged += OnCellValueChanged;
    }

    void UpdateGrid()
    {
        if (_displayGrid == null)
        {
            _displayGrid = new GridComponent.Cell[Grid.Rows.Count, Grid.Columns.Count];
            for (int i = 0; i < Grid.Rows.Count; i++)
            for (int j = 0; j < Grid.Rows.Count; j++)
            {
                _displayGrid[i, j] = new GridComponent.Cell();
            }
        }

        foreach ((int row, int column, HiddenSudokuCell cell) in Grid.Enumerate())
        {
            _displayGrid[row, column].BackgroundColor = cell.Locked
                ? GridComponent.Color.LightGrey
                : !cell.Empty
                    ? GridComponent.Color.LightBlue
                    : GridComponent.Color.None;

            _displayGrid[row, column].AnnotationIcon = cell.HasAnnotations ? "three-dots" : null;
        }
    }

    void OnCellValueChanged(object? sender, HiddenSudokuCell e) =>
        _ = InvokeAsync(
            () =>
            {
                UpdateGrid();
                StateHasChanged();
            }
        );

}