@page "/"
@using SudokuBattle.App.Services
@using SudokuBattle.Game
@inject NavigationManager Navigation;
@inject ISudokuGamesRepository Repository;
@inject GameTokenService GameTokenService;

<PageTitle>Sudoku Battle</PageTitle>

<div class="h-100 container d-flex flex-column align-items-stretch justify-content-center p-4">
    <div class="border rounded p-4">
        <h2>New Game</h2>
        <EditForm class="w-100 d-flex flex-column align-items-start justify-content-center py-4" Model="_model" OnSubmit="NewGame">
            <div class="d-flex gap-2 mb-3">
                <div class="form-check">
                    <InputCheckbox id="hints" type="checkbox" class="form-check-input" @bind-Value="_model!.Hint"/>
                    <label for="hints" class="form-check-label">Allow Hints?</label>
                </div>
                @if (_model.Hint)
                {
                    <InputNumber @bind-Value="_model!.HintCount"/>
                }
            </div>
            <button class="btn btn-primary">Create</button>
        </EditForm>

        @if (_newGameError != null)
        {
            <div class="text-danger small">
                @_newGameError
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    public string? PlayerName { get; set; }

    Model? _model;
    string? _newGameError;

    protected override void OnInitialized() => _model ??= new Model();

    void NewGame()
    {
        _newGameError = null;

        if (PlayerName == null)
        {
            _newGameError = "Could not find player name";
            StateHasChanged();
            return;
        }

        SudokuGameOptions options = new()
        {
            MaxHints = _model is not { Hint: true } || _model.HintCount <= 0 ? 0 : _model.HintCount
        };

        SudokuGame? game = SudokuGame.Create(options);
        if (game == null)
        {
            _newGameError = "Could not generate grid";
            StateHasChanged();
            return;
        }

        Repository.Save(game);

        game.Join(PlayerName, PlayerSide.Player1);
        string token = GameTokenService.Generate(game.Id, PlayerSide.Player1);
        Navigation.NavigateTo($"/game/{token}");
    }

    class Model
    {
        public bool Hint { get; set; }
        public int HintCount { get; set; } = 3;
    }

}