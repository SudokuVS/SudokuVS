@using SudokuVS.Game
@using SudokuVS.Game.Models
<div class="d-flex gap-4">
    @if (Game != null)
    {
        <div class="d-flex align-items-center justify-content-center">
            <GridIconComponent Grid="Game.InitialGrid" HideState="!Game.IsStarted"></GridIconComponent>
        </div>
        <div class="flex-grow-1 d-flex gap-2">
            <div class="d-flex align-items-center justify-content-center">
                vs.
            </div>
            <div class="flex-grow-1">
                @switch (Game.Winner)
                {
                    case PlayerSide.Player1:
                        <div class="flex-grow-1">
                            <div class="fs-5 fw-semibold text-success text-truncate">@(Game.Player1?.User.Name ?? "???")</div>
                            <div class="fs-5 fw-semibold text-danger text-truncate">@(Game.Player2?.User.Name ?? "???")</div>
                        </div>
                        break;
                    case PlayerSide.Player2:
                        <div class="flex-grow-1">
                            <div class="fs-5 fw-semibold text-danger" text-truncate>@(Game.Player1?.User.Name ?? "???")</div>
                            <div class="fs-5 fw-semibold text-success" text-truncate>@(Game.Player2?.User.Name ?? "???")</div>
                        </div>
                        break;
                    default:
                        <div class="flex-grow-1">
                            <div class="fs-5 fw-semibold text-truncate">@(Game.Player1?.User.Name ?? "???")</div>
                            <div class="fs-5 fw-semibold text-truncate">@(Game.Player2?.User.Name ?? "???")</div>
                        </div>
                        break;
                }
                <div class="lead">
                    @if (Game.IsStarted)
                    {
                        @:Round 1
                    }
                    else if (!Game.IsOver)
                    {
                        @:<i class="bi bi-hourglass-split ps-2"></i> In preparation
                    }
                </div>
            </div>
        </div>

        @if (Game.IsStarted)
        {
            <div class="d-flex align-items-center justify-content-center">
                <span class="fs-4 fw-semibold">
                    @GetElapsedTime()
                </span>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public SudokuGame? Game { get; set; }

    string GetElapsedTime()
    {
        if (Game == null)
        {
            return "";
        }

        TimeSpan time;
        if (Game.IsOver)
        {
            time = Game.EndDate.Value - Game.StartDate.Value;
        }
        else if (Game.IsStarted)
        {
            time = DateTime.Now - Game.StartDate.Value;
        }
        else
        {
            time = TimeSpan.Zero;
        }

        if (time.TotalHours >= 1)
        {
            return $"{time.TotalHours:0.}:{time.Minutes:00}:{time.Seconds:00}";
        }

        return $"{time.TotalMinutes:00}:{time.Seconds:00}";
    }

}