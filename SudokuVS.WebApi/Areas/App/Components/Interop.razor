@inject IJSRuntime JsRuntime;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Serilog
@implements IAsyncDisposable

@code {

    private IJSObjectReference? _interopModule;
    private IJSObjectReference? _interopInstance;
    private string _interopKey = Guid.NewGuid().ToString();
    private static Dictionary<string, Interop> _instances = new();

    [Parameter]
    public string[] Events { get; set; } = [];

    public event EventHandler<KeyboardEventArgs>? KeyupEvent;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _instances.Add(_interopKey, this);
        _interopModule ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Interop.razor.js");
        _interopInstance = await _interopModule.InvokeAsync<IJSObjectReference>("createInteropInstance", _interopKey);

        IEnumerable<string> callbacks = Events.Select(GetAddListenerName).OfType<string>();

        foreach (string callback in callbacks)
        {
            await _interopInstance.InvokeVoidAsync(callback);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_interopInstance == null)
        {
            return;
        }

        IEnumerable<string> callbacks = Events.Select(GetRemoveListenerName).OfType<string>();

        foreach (string callback in callbacks)
        {
            try
            {
                await _interopInstance.InvokeVoidAsync(callback);
            }
            catch (Exception exn)
            {
                Log.Debug(exn, "Error while disposing Interop instance {key}", _interopKey);
            }
        }
    }

    string? GetAddListenerName(string evt) =>
        evt switch
        {
            "keyup" => "addKeyupEventListener",
            _ => ""
        };

    string? GetRemoveListenerName(string evt) =>
        evt switch
        {
            "keyup" => "removeKeyupEventListener",
            _ => null
        };

    [JSInvokable]
    public static Task FireKeyupEvent(string key, KeyboardEventArgs args)
    {
        Interop? instance = _instances.GetValueOrDefault(key);
        instance?.KeyupEvent?.Invoke(null, args);
        return Task.CompletedTask;
    }

}