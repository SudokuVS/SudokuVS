@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject ISudokuGamesRepository Repository
@inject GameplayService GameplayService
@using Microsoft.AspNetCore.Components.Authorization
@using SudokuVS.Game
@using SudokuVS.Game.Models
@using SudokuVS.Game.Persistence
@using SudokuVS.Game.Users
@using SudokuVS.WebApi.Services
@implements IDisposable

@if (_instance != null)
{
    <div class="container-lg py-3">
        <GameSummaryComponent Game="_instance"></GameSummaryComponent>

        <hr class="mb-5"/>

        @if (_playerState == null)
        {
            // Player is not the game, they can join as player 1
            <div class="w-100 h-100 d-flex align-items-center justify-content-center">
                <button class="btn btn-outline-primary" @onclick="JoinGame">Join</button>
            </div>
        }
        else if (!_instance.IsStarted)
        {
            // Player is in the game, this side is empty and waiting for an opponent
            <div class="w-100 h-100 d-flex flex-column gap-2 align-items-center justify-content-center">
                <h3>No opponent has joined yet!</h3>
                <div class="position-relative d-flex align-items-center gap-4 border border-secondary-subtle rounded px-2 text-nowrap">
                    <div id="invitation-link-container" class="font-monospace text-secondary">
                        @GetOtherPlayerInvitationLink()
                    </div>
                    <a class="btn btn-outline-primary my-2 stretched-link" @onclick="CopyInvitationLinkAsync" id="copy-invitation-link-button">
                        <i class="bi bi-clipboard"></i>
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="w-100 d-flex gap-5">
                <div class="flex-grow-1">
                    <div class="mb-1">
                        <GridTotalProgressComponent Grid="_playerState.Grid" ProgressBarColor="GridTotalProgressComponent.Color.Yellow"/>
                    </div>
                    @for (int i = 1; i <= 9; i++)
                    {
                        <div class="mb-1">
                            <GridElementProgressComponent Grid="_playerState.Grid" Element="i" ProgressBarColor="GridElementProgressComponent.Color.Yellow"/>
                        </div>
                    }

                    @if (_instance.Options.MaxHints > 0)
                    {
                        <div class="row">
                            <div class="col-3 text-end">
                                Hints
                            </div>
                            <div class="col">
                                <div class="w-100 h-100 progress" role="progressbar" aria-valuemin="0" aria-valuenow="@_playerState.RemainingHints" aria-valuemax="@_instance.Options.MaxHints">
                                    <div class="progress-bar text-bg-orange" style="width: @((_playerState.RemainingHints * 100.0 / _instance.Options.MaxHints).ToString("00."))%">
                                        @_playerState.RemainingHints / @_instance.Options.MaxHints
                                    </div>

                                    @if (_playerState.RemainingHints == 0)
                                    {
                                        <div class="w-100 d-flex align-items-center justify-content-center">
                                            @_playerState.RemainingHints / @_instance.Options.MaxHints
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div>
                    <CurrentPlayerComponent PlayerState="_playerState" OtherPlayerState="_otherPlayerState" RightToLeft></CurrentPlayerComponent>
                </div>
                <div class="flex-grow-1">
                    <div class="mb-1">
                        <GridTotalProgressComponent Grid="_playerState.Grid" ProgressBarColor="GridTotalProgressComponent.Color.Blue"/>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="w-100 h-100 d-flex flex-column align-items-center justify-content-center">
        <div class="text-danger">Game not found</div>
        <a href="/">Go back</a>
    </div>
}

@code {

    [Parameter]
    public string? GameId { get; set; }

    UserIdentity? _user;
    SudokuGame? _instance;
    PlayerState? _playerState;
    IHiddenPlayerState? _otherPlayerState;
    Timer? _timer;

    IJSObjectReference? _gameModule;

    protected override async Task OnInitializedAsync()
    {
        if (GameId == null || !Guid.TryParse(GameId, out Guid gameId))
        {
            return;
        }

        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User.GetUserIdentity();
        if (_user == null)
        {
            return;
        }

        _instance = await Repository.GetAsync(gameId);
        if (_instance == null)
        {
            return;
        }

        _instance.PlayerJoined += OnPlayerJoined;
        _instance.GameOver += OnGameOver;

        UpdatePlayers();

        _timer = new Timer(__ => _ = InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    void UpdatePlayers()
    {
        if (_instance == null)
        {
            _playerState = null;
            return;
        }

        if (_user == null)
        {
            _playerState = null;
            return;
        }

        _playerState = _instance.GetPlayerState(_user.ExternalId);
        _otherPlayerState = _instance.GetOtherPlayerState(_user.ExternalId);
    }

    async Task JoinGame()
    {
        if (_instance == null || _user == null)
        {
            return;
        }

        await GameplayService.JoinGameAsync(_instance.Id, _user);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _gameModule ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Areas/App/Components/Game.razor.js");
    }

    public void Dispose()
    {
        if (_instance is not null)
        {
            _instance.PlayerJoined -= OnPlayerJoined;
        }

        _timer?.Dispose();
    }

    void OnPlayerJoined(object? __, PlayerSide side) =>
        _ = InvokeAsync(
            () =>
            {
                UpdatePlayers();
                StateHasChanged();
            }
        );

    void OnGameOver(object? __, PlayerSide ___) => _ = InvokeAsync(StateHasChanged);

    string GetOtherPlayerInvitationLink() => _instance == null ? "" : $"{Navigation.BaseUri}app/game/{_instance.Id}";

    async Task CopyInvitationLinkAsync()
    {
        if (_gameModule == null)
        {
            return;
        }

        await _gameModule.InvokeVoidAsync("copyInvitationLink", GetOtherPlayerInvitationLink());
    }

}